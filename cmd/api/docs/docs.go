// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/login": {
            "post": {
                "description": "API for user to login",
                "tags": [
                    "Auth"
                ],
                "summary": "Login (User)",
                "operationId": "UserLogin",
                "parameters": [
                    {
                        "description": "Input Fields",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/go-clean-arch_internal_adapter_delivery_http_dto.LoginBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/go-clean-arch_internal_adapter_delivery_http_dto.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/go-clean-arch_internal_adapter_delivery_http_dto.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/go-clean-arch_internal_adapter_delivery_http_dto.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/go-clean-arch_internal_adapter_delivery_http_dto.Response"
                        }
                    }
                }
            }
        },
        "/api/auth/signup": {
            "post": {
                "description": "API for user to register a new account",
                "tags": [
                    "Auth"
                ],
                "summary": "Signup (User)",
                "operationId": "UserSignUp",
                "parameters": [
                    {
                        "description": "Input Fields",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/go-clean-arch_internal_adapter_delivery_http_dto.UserSignUp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/go-clean-arch_internal_adapter_delivery_http_dto.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/go-clean-arch_internal_adapter_delivery_http_dto.Response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/go-clean-arch_internal_adapter_delivery_http_dto.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/go-clean-arch_internal_adapter_delivery_http_dto.Response"
                        }
                    }
                }
            }
        },
        "/api/user/me": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "API for user to get their own profile",
                "tags": [
                    "User"
                ],
                "summary": "Get User Profile",
                "operationId": "UserMe",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_adapter_delivery_http_handler.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/go-clean-arch_internal_adapter_delivery_http_dto.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/go-clean-arch_internal_adapter_delivery_http_dto.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/go-clean-arch_internal_adapter_delivery_http_dto.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "go-clean-arch_internal_adapter_delivery_http_dto.LoginBody": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 25,
                    "minLength": 5
                }
            }
        },
        "go-clean-arch_internal_adapter_delivery_http_dto.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "go-clean-arch_internal_adapter_delivery_http_dto.UserSignUp": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 25,
                    "minLength": 5
                },
                "username": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 3
                }
            }
        },
        "internal_adapter_delivery_http_handler.Response": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
